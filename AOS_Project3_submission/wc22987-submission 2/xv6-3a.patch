diff -ruN src/Makefile src-finished/Makefile
--- src/Makefile	2020-02-18 20:04:22.000000000 +0800
+++ src-finished/Makefile	2023-03-19 12:06:51.000000000 +0800
@@ -144,16 +144,16 @@
 	./vectors.pl > vectors.S
 
 ULIB = ulib.o usys.o printf.o umalloc.o
-
+#davis change text from 0 to 0x1000
 _%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o $@ $^
 	$(OBJDUMP) -S $@ > $*.asm
 	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
-
+#davis change text from 0 to 0x1000
 _forktest: forktest.o $(ULIB)
 	# forktest has less library code linked in - needs to be small
 	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o _forktest forktest.o ulib.o usys.o
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
@@ -169,6 +169,7 @@
 	_cat\
 	_echo\
 	_forktest\
+	_test_10\
 	_grep\
 	_init\
 	_kill\
@@ -248,7 +249,7 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c test_10.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff -ruN src/Makefile.test src-finished/Makefile.test
--- src/Makefile.test	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/Makefile.test	2023-03-19 12:06:51.000000000 +0800
@@ -76,7 +76,7 @@
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -fno-delete-null-pointer-checks -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -144,16 +144,16 @@
 	./vectors.pl > vectors.S
 
 ULIB = ulib.o usys.o printf.o umalloc.o
-
+#davis change text from 0 to 0x1000
 _%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o $@ $^
 	$(OBJDUMP) -S $@ > $*.asm
 	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
-
+#davis change text from 0 to 0x1000
 _forktest: forktest.o $(ULIB)
 	# forktest has less library code linked in - needs to be small
 	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o _forktest forktest.o ulib.o usys.o
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
@@ -169,6 +169,7 @@
 	_cat\
 	_echo\
 	_forktest\
+	_test_10\
 	_grep\
 	_init\
 	_kill\
@@ -257,7 +258,7 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c test_10.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff -ruN src/defs.h src-finished/defs.h
--- src/defs.h	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/defs.h	2023-03-19 12:06:51.000000000 +0800
@@ -185,6 +185,8 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+int mprotect(void *addr, int len);//davis add
+int munprotect(void *addr, int len);//davis add
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -ruN src/exec.c src-finished/exec.c
--- src/exec.c	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/exec.c	2023-03-19 12:06:51.000000000 +0800
@@ -39,7 +39,7 @@
     goto bad;
 
   // Load program into memory.
-  sz = 0;
+  sz = PGSIZE;//Davis change sz from 0 to pgsize
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
       goto bad;
diff -ruN src/syscall.c src-finished/syscall.c
--- src/syscall.c	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/syscall.c	2023-03-19 12:06:51.000000000 +0800
@@ -103,6 +103,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_mprotect(void);//davis add
+extern int sys_munprotect(void);//davis add
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mprotect]   sys_mprotect,
+[SYS_munprotect]   sys_munprotect,
 };
 
 void
diff -ruN src/syscall.h src-finished/syscall.h
--- src/syscall.h	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/syscall.h	2023-03-19 12:06:51.000000000 +0800
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mprotect   22  //Davis add
+#define SYS_munprotect 23  //Davis add
diff -ruN src/sysproc.c src-finished/sysproc.c
--- src/sysproc.c	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/sysproc.c	2023-03-19 12:06:51.000000000 +0800
@@ -89,3 +89,44 @@
   release(&tickslock);
   return xticks;
 }
+
+////Davis add
+int
+sys_mprotect(void)
+{
+  //Get system call arguments
+  char* addr = 0;
+  int len;
+
+  if(argptr(0, &addr, sizeof(void*)) < 0)
+    return -1;
+    
+  if(argint(1, &len) < 0)
+    return -1;
+  
+  //parameters checking
+  if(len <= 0 )//|| len > myproc()->sz
+    return -1;
+
+  return mprotect((void *)addr, len);
+}
+
+////Davis add - created munprotect syscall process
+int
+sys_munprotect(void)
+{
+
+  char* addr = 0;
+  int len;
+  
+  if(argptr(0, &addr, sizeof(void*)) < 0)
+    return -1;
+  if(argint(1, &len) < 0)
+    return -1;
+
+  //parameter checking
+  if(len <= 0 )//|| len > myproc()->sz
+    return -1;
+
+  return munprotect((void *)addr, len);
+}
diff -ruN src/test_10.c src-finished/test_10.c
--- src/test_10.c	1970-01-01 08:00:00.000000000 +0800
+++ src-finished/test_10.c	2023-03-19 12:06:51.000000000 +0800
@@ -0,0 +1,35 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/*test that munprotect is work.*/
+int main(int argc, char *argv[])
+{   
+    char *p = (char *)0x1000;
+    int ret = mprotect((void *)p, 1);
+    printf(1, "XV6_TEST_OUTPUT: Return value of mprotect on memory 0x1000: %d\n", ret);
+
+    ret = munprotect((void*)p, 1);
+    printf(1, "XV6_TEST_OUTPUT: Return value of munprotect : %d\n", ret);
+
+    if(fork() == 0)
+    {
+        printf(1, "XV6_TEST_OUTPUT: Inside child process\n");
+        *p = 'w'; //page fault trap 14 should occur here
+
+        printf(1, "XV6_TEST_OUTPUT: This should not be printed\n");
+        exit();
+    }
+    else
+    {
+        (void)wait();
+    }
+    
+    exit();
+}
\ No newline at end of file
diff -ruN src/test_2.c src-finished/test_2.c
--- src/test_2.c	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/test_2.c	2023-03-19 12:06:51.000000000 +0800
@@ -4,6 +4,7 @@
 int
 main(int argc, char *argv[])
 {
+    printf(1, "XV6_TEST_OUTPUT: this should print\n");
     volatile char *p = (char *)0;
 
     *p; //page fault trap 14 should occur here
diff -ruN src/user.h src-finished/user.h
--- src/user.h	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/user.h	2023-03-19 12:06:51.000000000 +0800
@@ -23,6 +23,8 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int mprotect(void *, int ); //Davis add
+int munprotect(void *, int ); //Davis add
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN src/usys.S src-finished/usys.S
--- src/usys.S	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/usys.S	2023-03-19 12:06:51.000000000 +0800
@@ -29,3 +29,5 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(mprotect)   //Davis add
+SYSCALL(munprotect) //Davis add
\ No newline at end of file
diff -ruN src/vm.c src-finished/vm.c
--- src/vm.c	2019-09-25 22:28:16.000000000 +0800
+++ src-finished/vm.c	2023-03-19 12:06:51.000000000 +0800
@@ -322,7 +322,9 @@
 
   if((d = setupkvm()) == 0)
     return 0;
-  for(i = 0; i < sz; i += PGSIZE){
+  
+  for(i = PGSIZE; i < sz; i += PGSIZE){	
+  //for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
@@ -391,4 +393,71 @@
 // Blank page.
 //PAGEBREAK!
 // Blank page.
+int
+mprotect(void *addr, int len)
+{
+  if((uint)addr < 0 || (uint)addr == KERNBASE || (uint)addr > KERNBASE)
+    return -1;
+	
+  if(((unsigned long)addr % PGSIZE) != 0)
+    return -1;
 
+  pte_t *pte;
+  //For loop to iterate through the pages in the range starting at addr to len pages (len*pgsize)
+  for (int i = 0; i < ((int) len * PGSIZE); i += PGSIZE) {
+    //convert an address in the middle of a page to an address at the beginning of the page.
+    uint base_addr = PGROUNDDOWN((uint)addr+i);
+    //Return the address of the PTE in page table pgdir
+    if((pte = walkpgdir(myproc()->pgdir, (void *)base_addr, 0)) == 0)
+    {
+      return 0;
+    }
+    //set read only
+    if(pte && ((*pte & PTE_W) != 0) && ((*pte & PTE_P) != 0) ){
+      *pte &= ~PTE_W;
+      //cprintf("Page table entry after: 0x%x\n", *pte);
+    }
+    else{
+      return 0;
+    }
+  }
+  //Return the address of the PTE in page table pgdir
+  // reloading the page table base register CR3 
+  lcr3(V2P(myproc()->pgdir));  
+  return 0;
+}
+
+int
+munprotect(void *addr, int len)
+{
+  if((uint)addr < 0 || (uint)addr == KERNBASE || (uint)addr > KERNBASE)
+    return -1;
+
+	//// Is addr page-aligned?
+  if(((unsigned long)addr % PGSIZE) != 0)
+    return -1;
+
+  pte_t *pte;
+  //For loop to iterate through the pages in the range starting at addr to len pages (len*pgsize)
+  for (int i = 0; i < ((int) len * PGSIZE); i += PGSIZE) {
+    //convert an address in the middle of a page to an address at the beginning of the page.
+    uint base_addr = PGROUNDDOWN((uint)addr+i);
+    //Return the address of the PTE in page table pgdir
+    if((pte = walkpgdir(myproc()->pgdir, (void *)base_addr, 0)) == 0)
+    {
+      return 0;
+    }
+    //sets the region back to writeable and readable
+    if(pte && ((*pte & PTE_U) != 0) && ((*pte & PTE_P) != 0) ){
+      *pte |= PTE_W;
+      //cprintf("Page table entry after: 0x%x\n", *pte);
+    }
+    else{
+      return 0;
+    }
+  }
+  //Return the address of the PTE in page table pgdir
+  // reloading the page table base register CR3 
+  lcr3(V2P(myproc()->pgdir));  
+  return 0;
+}
